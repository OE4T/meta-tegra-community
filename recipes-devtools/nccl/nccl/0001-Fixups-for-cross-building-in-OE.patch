From 80ccda9e7a40c538c15f112643a0ec15a4b12ff2 Mon Sep 17 00:00:00 2001
From: Ilies CHERGUI <ichergui@nvidia.com>
Date: Wed, 10 Sep 2025 15:19:27 +0100
Subject: [PATCH] Fixups for cross building in OE

Upstream-Status: Inappropriate [OE-specific]
Signed-off-by: Ilies CHERGUI <ichergui@nvidia.com>
---
 ext-tuner/example/Makefile |  2 +-
 makefiles/common.mk        | 55 +++-----------------------------------
 src/device/Makefile        | 24 ++++++-----------
 3 files changed, 12 insertions(+), 69 deletions(-)

diff --git a/ext-tuner/example/Makefile b/ext-tuner/example/Makefile
index 76c16b6..4dc9830 100644
--- a/ext-tuner/example/Makefile
+++ b/ext-tuner/example/Makefile
@@ -41,7 +41,7 @@ optimize-config:
 		echo "Example: make optimize-config CSV_FILE=scripts/sample_performance_data.csv"; \
 		exit 1; \
 	fi
-	python3 scripts/optimize_config.py $(CSV_FILE) \
+	$(PYTHON) scripts/optimize_config.py $(CSV_FILE) \
 		$(if $(OUTPUT),-o $(OUTPUT)) \
 		$(if $(METRIC),-m $(METRIC)) \
 		$(if $(SIZE_RANGES),--size-ranges $(SIZE_RANGES)) \
diff --git a/makefiles/common.mk b/makefiles/common.mk
index 6ba9bbf..491ab35 100644
--- a/makefiles/common.mk
+++ b/makefiles/common.mk
@@ -24,54 +24,12 @@ NVCC = $(CUDA_HOME)/bin/nvcc
 
 CUDA_LIB ?= $(CUDA_HOME)/lib64
 CUDA_INC ?= $(CUDA_HOME)/include
-CUDA_VERSION = $(strip $(shell which $(NVCC) >/dev/null && $(NVCC) --version | grep release | sed 's/.*release //' | sed 's/\,.*//'))
+CUDA_VERSION ?= $(strip $(shell which $(NVCC) >/dev/null && $(NVCC) --version | grep release | sed 's/.*release //' | sed 's/\,.*//'))
 #CUDA_VERSION ?= $(shell ls $(CUDA_LIB)/libcudart.so.* | head -1 | rev | cut -d "." -f -2 | rev)
 CUDA_MAJOR = $(shell echo $(CUDA_VERSION) | cut -d "." -f 1)
 CUDA_MINOR = $(shell echo $(CUDA_VERSION) | cut -d "." -f 2)
 #$(info CUDA_VERSION ${CUDA_MAJOR}.${CUDA_MINOR})
 
-# You should define NVCC_GENCODE in your environment to the minimal set
-# of archs to reduce compile time.
-CUDA8_GENCODE = -gencode=arch=compute_50,code=sm_50 \
-                -gencode=arch=compute_60,code=sm_60 \
-                -gencode=arch=compute_61,code=sm_61
-ifeq ($(shell test "0$(CUDA_MAJOR)" -lt 12; echo $$?),0)
-# SM35 is deprecated from CUDA12.0 onwards
-CUDA8_GENCODE += -gencode=arch=compute_35,code=sm_35
-endif
-CUDA9_GENCODE = -gencode=arch=compute_70,code=sm_70
-CUDA10_GENCODE = -gencode=arch=compute_75,code=sm_75
-CUDA11_GENCODE = -gencode=arch=compute_80,code=sm_80
-CUDA12_GENCODE = -gencode=arch=compute_90,code=sm_90
-CUDA12_8_GENCODE = -gencode=arch=compute_100,code=sm_100 \
-                   -gencode=arch=compute_120,code=sm_120
-CUDA13_GENCODE = -gencode=arch=compute_110,code=sm_110
-
-CUDA8_PTX     = -gencode=arch=compute_61,code=compute_61
-CUDA9_PTX     = -gencode=arch=compute_70,code=compute_70
-CUDA11_PTX    = -gencode=arch=compute_80,code=compute_80
-CUDA12_PTX    = -gencode=arch=compute_90,code=compute_90
-CUDA13_PTX    = -gencode=arch=compute_120,code=compute_120
-
-ifeq ($(shell test "0$(CUDA_MAJOR)" -ge 13; echo $$?),0)
-# Prior to SM75 is deprecated from CUDA13.0 onwards
-  NVCC_GENCODE ?= $(CUDA10_GENCODE) $(CUDA11_GENCODE) $(CUDA12_GENCODE) $(CUDA12_8_GENCODE) $(CUDA13_GENCODE) $(CUDA13_PTX)
-else ifeq ($(shell test "0$(CUDA_MAJOR)" -eq 12 -a "0$(CUDA_MINOR)" -ge 8; echo $$?),0)
-# Include Blackwell support if we're using CUDA12.8 or above
-  NVCC_GENCODE ?= $(CUDA8_GENCODE) $(CUDA9_GENCODE) $(CUDA11_GENCODE) $(CUDA12_GENCODE) $(CUDA12_8_GENCODE) $(CUDA13_PTX)
-else ifeq ($(shell test "0$(CUDA_MAJOR)" -eq 11 -a "0$(CUDA_MINOR)" -ge 8 -o "0$(CUDA_MAJOR)" -gt 11; echo $$?),0)
-# Include Hopper support if we're using CUDA11.8 or above
-  NVCC_GENCODE ?= $(CUDA8_GENCODE) $(CUDA9_GENCODE) $(CUDA11_GENCODE) $(CUDA12_GENCODE) $(CUDA12_PTX)
-else ifeq ($(shell test "0$(CUDA_MAJOR)" -ge 11; echo $$?),0)
-  NVCC_GENCODE ?= $(CUDA8_GENCODE) $(CUDA9_GENCODE) $(CUDA11_GENCODE) $(CUDA11_PTX)
-# Include Volta support if we're using CUDA9 or above
-else ifeq ($(shell test "0$(CUDA_MAJOR)" -ge 9; echo $$?),0)
-  NVCC_GENCODE ?= $(CUDA8_GENCODE) $(CUDA9_GENCODE) $(CUDA9_PTX)
-else
-  NVCC_GENCODE ?= $(CUDA8_GENCODE) $(CUDA8_PTX)
-endif
-$(info NVCC_GENCODE is ${NVCC_GENCODE})
-
 # CUDA 13.0 requires c++17
 ifeq ($(shell test "0$(CUDA_MAJOR)" -ge 13; echo $$?),0)
   CXXSTD ?= -std=c++17
@@ -86,7 +44,8 @@ CXXFLAGS   := -DCUDA_MAJOR=$(CUDA_MAJOR) -DCUDA_MINOR=$(CUDA_MINOR) -fPIC -fvisi
 # Maxrregcount needs to be set accordingly to NCCL_MAX_NTHREADS (otherwise it will cause kernel launch errors)
 # 512 : 120, 640 : 96, 768 : 80, 1024 : 60
 # We would not have to set this if we used __launch_bounds__, but this only works on kernels, not on functions.
-NVCUFLAGS  := -ccbin $(CXX) $(NVCC_GENCODE) $(CXXSTD) --expt-extended-lambda -Xptxas -maxrregcount=96 -Xfatbin -compress-all
+NVCUFLAGS  ?= -ccbin $(CXX) $(NVCC_GENCODE) $(CXXSTD) -Xptxas -maxrregcount=96 -Xfatbin -compress-all
+NVCUFLAGS  += $(CXXSTD) --expt-extended-lambda
 # Use addprefix so that we can specify more than one path
 NVLDFLAGS  := -L${CUDA_LIB} -lcudart -lrt
 
@@ -100,14 +59,6 @@ NVLDFLAGS   += ${GCOV_FLAGS:%=-Xcompiler %}
 # $(warning GCOV_FLAGS=${GCOV_FLAGS})
 ########## GCOV ##########
 
-ifeq ($(DEBUG), 0)
-NVCUFLAGS += -O3
-CXXFLAGS  += -O3 -g
-else
-NVCUFLAGS += -O0 -G -g
-CXXFLAGS  += -O0 -g -ggdb3
-endif
-
 # Make sure to run with ASAN_OPTIONS=protect_shadow_gap=0 otherwise CUDA will fail with OOM
 ifneq ($(ASAN), 0)
 CXXFLAGS += -fsanitize=address
diff --git a/src/device/Makefile b/src/device/Makefile
index 67ab176..87eba6e 100644
--- a/src/device/Makefile
+++ b/src/device/Makefile
@@ -23,7 +23,8 @@ INCFLAGS  = -I. -I.. -I$(BUILDDIR)/include -I../include
 NVCUFLAGS += $(INCFLAGS) --compiler-options "-fPIC -fvisibility=hidden"
 CXXFLAGS  += $(INCFLAGS)
 
-NVCUFLAGS_SYM := -ccbin $(CXX) $(CXXSTD) --expt-extended-lambda -Xptxas -maxrregcount=128 -Xfatbin -compress-all
+NVCUFLAGS_SYM  ?= -ccbin $(CXX) $(NVCC_GENCODE) $(CXXSTD) -Xptxas -maxrregcount=128 -Xfatbin -compress-all
+NVCUFLAGS_SYM  += $(CXXSTD) --expt-extended-lambda
 NVCUFLAGS_SYM += $(INCFLAGS) --compiler-options "-fPIC -fvisibility=hidden"
 
 SAY = @bash -c 'path="$$2"; [[ "$$(realpath "$$2")" =~ ^$(subst .,\.,$(abspath $(NCCLDIR)))/(.*)$$ ]] && path="$${BASH_REMATCH[1]}"; printf "%-15s %s\n" "$$1" "$$path"' SAY
@@ -36,13 +37,8 @@ define COMPILE
  $(call COMPILE$(or $3,$(suffix $2)),$1,$2)
 endef
 
-ifeq ($(shell echo "$$((1000*$(CUDA_MAJOR) + 10*$(CUDA_MINOR) >= 12090))"),1)
-	NVCC_GENCODE_LDMC_FP8 = -gencode=arch=compute_100f,code=sm_100f
-else ifeq ($(shell echo "$$((1000*$(CUDA_MAJOR) + 10*$(CUDA_MINOR) >= 12070))"),1)
-  NVCC_GENCODE_LDMC_FP8 = -gencode=arch=compute_100a,code=sm_100a
-else
-	NVCC_GENCODE_LDMC_FP8 =
-endif
+NVCC_GENCODE_LDMC_FP8 =
+
 
 define COMPILE_SYM
 @$(SAY) "Compiling" $2;\
@@ -66,16 +62,12 @@ endef
 all: $(MANIFEST)
 
 $(OBJDIR)/gensrc: generate.py
-	@mkdir -p $@
-	(which python3 >/dev/null || \
-	  (bar='!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'; \
-	   printf "\n$${bar}\nERROR: Building NCCL requires a Python 3 installation invokable as 'python3'.\n$${bar}\n\n" 1>&2; \
-	   exit 1)) \
-	&& ./generate.py $@ "$(ONLY_FUNCS)"
+	mkdir -p $@
+	$(PYTHON) ./generate.py $@ "$(ONLY_FUNCS)"
 
 $(OBJDIR)/gensrc/symmetric: $(OBJDIR)/gensrc symmetric/generate.py
-	@mkdir -p $@
-	./symmetric/generate.py $@
+	mkdir -p $@
+	$(PYTHON) ./symmetric/generate.py $@
 
 # The trailing ";" is necessary to make this an "empty recipe":
 # https://www.gnu.org/software/make/manual/html_node/Empty-Recipes.html
-- 
2.34.1

