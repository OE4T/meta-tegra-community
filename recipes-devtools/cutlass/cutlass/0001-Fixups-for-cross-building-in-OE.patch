From b267aa0f9166a1a50e0b4e3439ee6be69ef32ae8 Mon Sep 17 00:00:00 2001
From: Ilies CHERGUI <ichergui@nvidia.com>
Date: Thu, 11 Sep 2025 16:36:47 +0100
Subject: [PATCH] Fixups for cross building in OE

Upstream-Status: Inappropriate [OE-specific]
Signed-off-by: Ilies CHERGUI <ichergui@nvidia.com>
---
 CMakeLists.txt                        | 23 -----------------------
 cmake/googletest.cmake                | 24 +-----------------------
 include/cutlass/cuda_host_adapter.hpp |  2 +-
 include/cutlass/platform/platform.h   | 10 +++++-----
 python/cutlass/emit/pytorch.py        |  5 -----
 5 files changed, 7 insertions(+), 57 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7419bdf5..5fd29087 100755
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -146,16 +146,6 @@ endif()
 
 ################################################################################
 
-set(CUTLASS_NVCC_ARCHS_SUPPORTED "")
-if (CUDA_VERSION VERSION_GREATER_EQUAL 11.4 AND NOT CUDA_COMPILER MATCHES "[Cc]lang")
-  list(APPEND CUTLASS_NVCC_ARCHS_SUPPORTED 70 72 75 80 86 87)
-endif()
-if (CUDA_VERSION VERSION_GREATER_EQUAL 11.8 AND NOT CUDA_COMPILER MATCHES "[Cc]lang")
-  list(APPEND CUTLASS_NVCC_ARCHS_SUPPORTED 89 90)
-endif()
-if (CUDA_VERSION VERSION_GREATER_EQUAL 12.0 AND NOT CUDA_COMPILER MATCHES "[Cc]lang")
-  list(APPEND CUTLASS_NVCC_ARCHS_SUPPORTED 90a)
-endif()
 set(CUTLASS_NVCC_ARCHS ${CUTLASS_NVCC_ARCHS_SUPPORTED} CACHE STRING "The SM architectures requested.")
 set(CUTLASS_NVCC_ARCHS_ENABLED ${CUTLASS_NVCC_ARCHS} CACHE STRING "The SM architectures to build code for.")
 
@@ -716,19 +706,6 @@ if (DOXYGEN_FOUND)
     )
 endif()
 
-if(NOT WIN32)
-  # Add common library search paths so executables and libraries can load and run
-  # without LD_LIBRARY_PATH being set.
-  link_libraries(
-    "-Wl,-rpath,'$ORIGIN'"
-    "-Wl,-rpath,'$ORIGIN/../lib64'"
-    "-Wl,-rpath,'$ORIGIN/../lib'"
-    "-Wl,-rpath,'${CUDA_TOOLKIT_ROOT_DIR}/lib64'"
-    "-Wl,-rpath,'${CUDA_TOOLKIT_ROOT_DIR}/lib'"
-    ${CMAKE_DL_LIBS}
-    )
-endif()
-
 ################################################################################
 
 include(CTest)
diff --git a/cmake/googletest.cmake b/cmake/googletest.cmake
index 0350fb2d..97ecac3b 100644
--- a/cmake/googletest.cmake
+++ b/cmake/googletest.cmake
@@ -26,26 +26,4 @@
 # OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-include(FetchContent)
-
-set(GOOGLETEST_DIR "" CACHE STRING "Location of local GoogleTest repo to build against")
-
-if(GOOGLETEST_DIR)
-  set(FETCHCONTENT_SOURCE_DIR_GOOGLETEST ${GOOGLETEST_DIR} CACHE STRING "GoogleTest source directory override")
-endif()
-
-FetchContent_Declare(
-  googletest
-  GIT_REPOSITORY https://github.com/google/googletest.git
-  GIT_TAG        v1.14.0
-  )
-
-FetchContent_GetProperties(googletest)
-
-if(NOT googletest_POPULATED)
-  FetchContent_Populate(googletest)
-  if (MSVC)
-    set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
-  endif()
-  add_subdirectory(${googletest_SOURCE_DIR} ${googletest_BINARY_DIR} EXCLUDE_FROM_ALL)
-endif()
+find_package(GTest REQUIRED)
diff --git a/include/cutlass/cuda_host_adapter.hpp b/include/cutlass/cuda_host_adapter.hpp
index f9ff723c..f0196ff1 100644
--- a/include/cutlass/cuda_host_adapter.hpp
+++ b/include/cutlass/cuda_host_adapter.hpp
@@ -99,7 +99,7 @@ namespace cutlass {
 
 #else // defined(CUTLASS_ENABLE_DIRECT_CUDA_DRIVER_CALL)
 
-#if (__CUDACC_VER_MAJOR__ >= 12 && __CUDACC_VER_MINOR__ >= 5)
+#if (__CUDACC_VER_MAJOR__ > 12  || (__CUDACC_VER_MAJOR__ == 12 && __CUDACC_VER_MINOR__ >= 5))
 
 #define CUTLASS_CUDA_DRIVER_WRAPPER_DECL(func, ver)             \
   template <typename... Args>                                   \
diff --git a/include/cutlass/platform/platform.h b/include/cutlass/platform/platform.h
index e6a445ea..7ca86605 100644
--- a/include/cutlass/platform/platform.h
+++ b/include/cutlass/platform/platform.h
@@ -605,11 +605,11 @@ struct alignment_of<float4> {
   enum { value = 16 };
 };
 template <>
-struct alignment_of<long4> {
+struct alignment_of<long4_32a> {
   enum { value = 16 };
 };
 template <>
-struct alignment_of<ulong4> {
+struct alignment_of<ulong4_32a> {
   enum { value = 16 };
 };
 template <>
@@ -625,15 +625,15 @@ struct alignment_of<double2> {
   enum { value = 16 };
 };
 template <>
-struct alignment_of<longlong4> {
+struct alignment_of<longlong4_32a> {
   enum { value = 16 };
 };
 template <>
-struct alignment_of<ulonglong4> {
+struct alignment_of<ulonglong4_32a> {
   enum { value = 16 };
 };
 template <>
-struct alignment_of<double4> {
+struct alignment_of<double4_32a> {
   enum { value = 16 };
 };
 
diff --git a/python/cutlass/emit/pytorch.py b/python/cutlass/emit/pytorch.py
index ac13e866..75acfb6c 100644
--- a/python/cutlass/emit/pytorch.py
+++ b/python/cutlass/emit/pytorch.py
@@ -766,11 +766,6 @@ def _pytorch_gemm(op, name: str, cc: int, jit: bool = False, sourcedir: str = ""
     with open(cpp_file, "w") as outfile:
         outfile.write(cpp_source)
 
-    extra_compile_args = ""
-    if cc == 90:
-        extra_compile_args = "'--generate-code=arch=compute_90a,code=[sm_90a]'"
-    _generate_setup(name, sourcedir, extra_compile_args)
-
     if jit:
         return _jit(name, cc, cpp_file, cuda_file)
 
-- 
2.34.1

