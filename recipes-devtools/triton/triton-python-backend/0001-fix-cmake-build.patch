From 26de9e8d2fcd78400e889ae7aba86be3cb1d628b Mon Sep 17 00:00:00 2001
From: Ilies CHERGUI <ichergui@nvidia.com>
Date: Fri, 13 Jun 2025 18:08:57 +0100
Subject: [PATCH] fix cmake build

Upstream-Status: Inappropriate [OE-Specific]
Signed-off-by: Khem Raj <raj.khem@gmail.com>
Signed-off-by: Ilies CHERGUI <ichergui@nvidia.com>
---
 CMakeLists.txt  | 146 +++---------------------------------------------
 src/pb_memory.h |   2 +
 2 files changed, 10 insertions(+), 138 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 0aaa95a..a572826 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -26,7 +26,7 @@
 
 cmake_minimum_required(VERSION 3.17)
 
-project(tritonpythonbackend LANGUAGES C CXX)
+project(triton-python-backend LANGUAGES C CXX)
 
 # Use C++17 standard as Triton's minimum required.
 set(TRITON_MIN_CXX_STANDARD 17 CACHE STRING "The minimum C++ standard which features are requested to build this target.")
@@ -56,89 +56,13 @@ if(NOT CMAKE_BUILD_TYPE)
   set(CMAKE_BUILD_TYPE Release)
 endif()
 
-#
-# Dependencies
-#
-# FetchContent's composability isn't very good. We must include the
-# transitive closure of all repos so that we can override the tag.
-#
-include(FetchContent)
-
-# We need to use ExternalProject because we want to use Boost 1.76 which is not
-# available in Ubuntu 20.04
-include(ExternalProject)
-
-FetchContent_Declare(
-  repo-common
-  GIT_REPOSITORY ${TRITON_REPO_ORGANIZATION}/common.git
-  GIT_TAG ${TRITON_COMMON_REPO_TAG}
-)
-FetchContent_Declare(
-  repo-core
-  GIT_REPOSITORY ${TRITON_REPO_ORGANIZATION}/core.git
-  GIT_TAG ${TRITON_CORE_REPO_TAG}
-)
-FetchContent_Declare(
-  repo-backend
-  GIT_REPOSITORY ${TRITON_REPO_ORGANIZATION}/backend.git
-  GIT_TAG ${TRITON_BACKEND_REPO_TAG}
-)
-FetchContent_MakeAvailable(repo-common repo-core repo-backend)
-
-FetchContent_Declare(
-  pybind11
-  GIT_REPOSITORY "https://github.com/pybind/pybind11"
-  # COMMIT ID for v2.12.0
-  GIT_TAG "3e9dfa2866941655c56877882565e7577de6fc7b"
-  GIT_SHALLOW ON
-)
-
-# RHEL base container has multiple version of Python installed. By default
-# it seems like pybind will pickup v3.6, so we specifically assign it to
-# search for 3.12 here.
-set(RHEL_BUILD OFF)
-if(LINUX)
-  file(STRINGS "/etc/os-release" DISTRO_ID_LIKE REGEX "ID_LIKE")
-  if(${DISTRO_ID_LIKE} MATCHES "rhel|centos")
-    set(RHEL_BUILD ON)
-  endif(${DISTRO_ID_LIKE} MATCHES "rhel|centos")
-endif(LINUX)
-FetchContent_MakeAvailable(pybind11)
-
-#
-# DLPack
-#
-FetchContent_Declare(
-  dlpack
-  GIT_REPOSITORY "https://github.com/dmlc/dlpack"
-  GIT_TAG "v0.8"
-  GIT_SHALLOW ON
-)
-# Option must be set off so WIN32 build does not break
-set(CMAKE_POLICY_DEFAULT_CMP0077 NEW)
-set(BUILD_MOCK OFF)
-FetchContent_MakeAvailable(dlpack)
-
-#
-# Boost
-#
-ExternalProject_Add(
-  boostorg
-  URL https://archives.boost.io/release/1.79.0/source/boost_1_79_0.tar.gz
-  URL_HASH SHA256=273f1be93238a068aba4f9735a4a2b003019af067b9c183ed227780b8f36062c
-  PREFIX "boost-src"
-  CONFIGURE_COMMAND ${CMAKE_COMMAND} -E copy_directory
-                    <SOURCE_DIR>/boost/ ${CMAKE_BINARY_DIR}/boost
-  INSTALL_COMMAND ""
-  BUILD_COMMAND ""
-)
-set(boostorg_INCLUDE_DIRS "${CMAKE_BINARY_DIR}/boost/")
-
 #
 # CUDA
 #
 if(${TRITON_ENABLE_GPU})
-  find_package(CUDAToolkit REQUIRED)
+  enable_language(CUDA)
+  find_package(CUDA REQUIRED)
+  include_directories(${CUDA_INCLUDE_DIRS})
   message(STATUS "Using CUDA ${CUDA_VERSION}")
   set(CUDA_NVCC_FLAGS -std=c++${TRITON_MIN_CXX_STANDARD})
 elseif()
@@ -250,16 +174,6 @@ list(APPEND
   ${COMMON_SRCS}
 )
 
-add_executable(
-  triton-python-backend-stub
-  ${PYTHON_BACKEND_STUB_SRCS}
-)
-
-add_dependencies(triton-python-backend boostorg)
-add_dependencies(triton-python-backend-stub boostorg)
-
-set_property(TARGET triton-python-backend-stub PROPERTY OUTPUT_NAME triton_python_backend_stub)
-
 add_library(
   TritonPythonBackend::triton-python-backend ALIAS triton-python-backend
 )
@@ -272,32 +186,6 @@ target_compile_options(
   $<$<CXX_COMPILER_ID:MSVC>:/Wall /D_WIN32_WINNT=0x0A00 /EHsc /Zc:preprocessor>
 )
 
-target_compile_features(triton-python-backend-stub PRIVATE cxx_std_${TRITON_MIN_CXX_STANDARD})
-target_compile_options(
-  triton-python-backend-stub PRIVATE
-  $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:AppleClang>,$<CXX_COMPILER_ID:GNU>>:
-    -fvisibility=hidden -Wall -Wextra -Wno-unused-parameter -Wno-type-limits -Werror>
-  $<$<CXX_COMPILER_ID:MSVC>:/Wall /D_WIN32_WINNT=0x0A00 /EHsc /Zc:preprocessor>
-)
-target_compile_definitions(triton-python-backend-stub PRIVATE TRITON_PB_STUB)
-
-# RHEL assets are not released in a container environment nor do the current
-# Python lib versions in the manylinux base container match those currently
-# available for RHEL8 package managers. Therefore, we package the correct
-# python libs in the backend folder and adjust the stub executable to look
-# in its own folder at runtime.
-if(RHEL_BUILD)
-  set_target_properties(
-    triton-python-backend-stub
-    PROPERTIES
-      SKIP_BUILD_RPATH TRUE
-      BUILD_WITH_INSTALL_RPATH TRUE
-      INSTALL_RPATH_USE_LINK_PATH FALSE
-      INSTALL_RPATH "$\{ORIGIN\}"
-  )
-endif(RHEL_BUILD)
-
-
 # For WIN32 do not link Threads and DL_LIBS
 if(WIN32)
   target_link_libraries(
@@ -324,27 +212,14 @@ else()
   target_link_libraries(
     triton-python-backend
     PRIVATE
-      dlpack
       Threads::Threads
       triton-backend-utils          # from repo-backend
+      triton-backend-cuda-utils     # from repo-backend
       ${CMAKE_DL_LIBS}              # dlopen and dlclose
       -lrt                          # shared memory
-      triton-core-serverstub        # from repo-core
       ZLIB::ZLIB
       -larchive
   )
-
-  target_link_libraries(
-    triton-python-backend-stub
-    PRIVATE
-    dlpack
-    Threads::Threads
-    triton-backend-utils           # from repo-backend
-    ${CMAKE_DL_LIBS}               # dlopen and dlclose
-    pybind11::embed
-    -lrt                           # shared memory
-    -larchive                      # libarchive
-  )
 endif()
 
 if(WIN32)
@@ -363,8 +238,6 @@ else()
   )
 endif()
 
-add_subdirectory(./src/shm_monitor)
-
 #
 # Install
 #
@@ -374,12 +247,10 @@ set(INSTALL_CONFIGDIR ${CMAKE_INSTALL_LIBDIR}/cmake/TritonPythonBackend)
 install(
   TARGETS
     triton-python-backend
-    triton-python-backend-stub
   EXPORT
     triton-python-backend-targets
-  LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/backends/python
-  ARCHIVE DESTINATION ${CMAKE_INSTALL_PREFIX}/backends/python
-  RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/backends/python
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}/python
+  RUNTIME DESTINATION ${CMAKE_INSTALL_LIBDIR}/python
 )
 
 install(
@@ -396,8 +267,7 @@ install(
 install(
   FILES
     src/resources/triton_python_backend_utils.py
-  DESTINATION
-    ${CMAKE_INSTALL_PREFIX}/backends/python
+  DESTINATION ${CMAKE_INSTALL_LIBDIR}/python
 )
 
 include(CMakePackageConfigHelpers)
diff --git a/src/pb_memory.h b/src/pb_memory.h
index ad79dae..fec8edc 100644
--- a/src/pb_memory.h
+++ b/src/pb_memory.h
@@ -26,6 +26,8 @@
 
 #pragma once
 
+#include <functional>
+
 #include "pb_utils.h"
 #include "shm_manager.h"
 #include "triton/backend/backend_common.h"
-- 
2.34.1

