From 43b0d0f0ba3225b5c58371cbb5958718fb29a3d4 Mon Sep 17 00:00:00 2001
From: Ilies CHERGUI <ichergui@nvidia.com>
Date: Wed, 11 Jun 2025 12:07:22 +0100
Subject: [PATCH] Build fixups

Upstream-Status: Inappropriate [OE-Specific]
Signed-off-by: Ilies CHERGUI <ichergui@nvidia.com>
---
 CMakeLists.txt | 55 +++++++++++++-------------------------------------
 1 file changed, 14 insertions(+), 41 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3e450fd..29261f7 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -140,7 +140,8 @@ endif()
 message(STATUS "Using Onnxruntime docker: ${TRITON_ONNXRUNTIME_DOCKER_BUILD}")
 
 if(NOT TRITON_ONNXRUNTIME_DOCKER_BUILD)
-  find_library(ONNXRUNTIME_LIBRARY NAMES onnxruntime PATHS ${TRITON_ONNXRUNTIME_LIB_PATHS} REQUIRED)
+  find_package(PkgConfig)
+  pkg_check_modules(libonnxruntime REQUIRED IMPORTED_TARGET GLOBAL libonnxruntime>=1.21.0)
   if(${TRITON_ENABLE_ONNXRUNTIME_OPENVINO})
     find_library(OV_LIBRARY
       NAMES openvino
@@ -164,47 +165,19 @@ else()
   set(TRITON_ONNXRUNTIME_LIB_PATHS "${CMAKE_CURRENT_BINARY_DIR}/onnxruntime/lib")
   if (WIN32)
     set(ONNXRUNTIME_LIBRARY "onnxruntime")
-  else()
-    set(ONNXRUNTIME_LIBRARY "libonnxruntime.so")
   endif() # WIN32
   if(${TRITON_ENABLE_ONNXRUNTIME_OPENVINO})
     set(OV_LIBRARY "libopenvino.so")
   endif() # TRITON_ENABLE_ONNXRUNTIME_OPENVINO
 endif()
 
-#
-# Dependencies
-#
-# FetchContent's composability isn't very good. We must include the
-# transitive closure of all repos so that we can override the tag.
-#
-include(FetchContent)
-
-FetchContent_Declare(
-  repo-common
-  GIT_REPOSITORY ${TRITON_REPO_ORGANIZATION}/common.git
-  GIT_TAG ${TRITON_COMMON_REPO_TAG}
-  GIT_SHALLOW ON
-)
-FetchContent_Declare(
-  repo-core
-  GIT_REPOSITORY ${TRITON_REPO_ORGANIZATION}/core.git
-  GIT_TAG ${TRITON_CORE_REPO_TAG}
-  GIT_SHALLOW ON
-)
-FetchContent_Declare(
-  repo-backend
-  GIT_REPOSITORY ${TRITON_REPO_ORGANIZATION}/backend.git
-  GIT_TAG ${TRITON_BACKEND_REPO_TAG}
-  GIT_SHALLOW ON
-)
-FetchContent_MakeAvailable(repo-common repo-core repo-backend)
-
 #
 # CUDA
 #
 if(${TRITON_ENABLE_GPU})
-  find_package(CUDAToolkit REQUIRED)
+  enable_language(CUDA)
+  find_package(CUDA REQUIRED)
+  include_directories(${CUDA_INCLUDE_DIRS})
 endif() # TRITON_ENABLE_GPU
 
 #
@@ -281,7 +254,7 @@ set_target_properties(
     INSTALL_RPATH_USE_LINK_PATH FALSE
     INSTALL_RPATH "$\{ORIGIN\}"
     LINK_DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/libtriton_onnxruntime.ldscript
-    LINK_FLAGS "-Wl,--version-script libtriton_onnxruntime.ldscript"
+    LINK_FLAGS "-Wl,--version-script ${CMAKE_CURRENT_BINARY_DIR}/libtriton_onnxruntime.ldscript"
 )
 endif()
 
@@ -295,19 +268,19 @@ ENDFOREACH(p)
 target_link_libraries(
   triton-onnxruntime-backend
   PRIVATE
-    triton-core-serverapi   # from repo-core
-    triton-core-backendapi  # from repo-core
-    triton-core-serverstub  # from repo-core
-    triton-backend-utils    # from repo-backend
+    triton-backend-utils               # from repo-backend
+    triton-backend-cuda-utils          # from repo-backend
+    triton-core                        # from repo-core
+    triton-common-async-work-queue     # from repo-common
     ${TRITON_ONNXRUNTIME_LDFLAGS}
-    ${ONNXRUNTIME_LIBRARY}
+    PkgConfig::libonnxruntime
 )
 
 if(${TRITON_ENABLE_GPU})
   target_link_libraries(
     triton-onnxruntime-backend
     PRIVATE
-      CUDA::cudart
+      cudart
   )
 endif() # TRITON_ENABLE_GPU
 
@@ -410,8 +383,8 @@ install(
     triton-onnxruntime-backend
   EXPORT
     triton-onnxruntime-backend-targets
-  LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/backends/onnxruntime
-  RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/backends/onnxruntime
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}/onnxruntime
+  RUNTIME DESTINATION ${CMAKE_INSTALL_LIBDIR}/onnxruntime
 )
 
 # For Jetson, we build the onnxruntime backend once and re-use
-- 
2.34.1

