From 753b2b59a443a290beacdfb0d77b18bdba191290 Mon Sep 17 00:00:00 2001
From: Ilies CHERGUI <ichergui@nvidia.com>
Date: Thu, 18 Sep 2025 12:22:30 +0100
Subject: [PATCH 02/10] fix the dependency with AJA operator

Upstream-Status: Inappropriate [OE-specific]
Signed-off-by: Ilies CHERGUI <ichergui@nvidia.com>
---
 applications/CMakeLists.txt                     |  8 ++++----
 .../aja_video_capture/cpp/CMakeLists.txt        |  4 ++--
 .../cpp/CMakeLists.txt                          |  2 +-
 .../cpp/main.cpp                                | 12 +++++++++++-
 .../cpp/post-proc-cpu/CMakeLists.txt            |  6 +++---
 .../cpp/post-proc-cpu/multi_ai.cpp              | 12 +++++++++++-
 .../cpp/post-proc-matx-cpu/CMakeLists.txt       |  4 ++--
 .../cpp/post-proc-matx-cpu/multi_ai.cpp         |  7 ++++++-
 .../multiai_ultrasound/cpp/CMakeLists.txt       |  4 ++--
 applications/multiai_ultrasound/cpp/main.cpp    |  7 ++++++-
 .../python/multiai_ultrasound.py                |  5 +++--
 .../object_detection_torch/CMakeLists.txt       |  3 ++-
 .../ultrasound_segmentation/cpp/CMakeLists.txt  |  6 +++---
 .../ultrasound_segmentation/cpp/main.cpp        | 17 ++++++++++++++++-
 .../python/ultrasound_segmentation.py           |  6 +++---
 15 files changed, 75 insertions(+), 28 deletions(-)

diff --git a/applications/CMakeLists.txt b/applications/CMakeLists.txt
index a2db3e24..8d971010 100644
--- a/applications/CMakeLists.txt
+++ b/applications/CMakeLists.txt
@@ -44,7 +44,7 @@ add_subdirectory(distributed)
 
 add_holohub_application(endoscopy_depth_estimation)
 
-add_holohub_application(endoscopy_out_of_body_detection DEPENDS OPERATORS aja_source)
+add_holohub_application(endoscopy_out_of_body_detection DEPENDS OPERATORS OPTIONAL aja_source)
 
 add_holohub_application(endoscopy_tool_tracking DEPENDS
                         OPERATORS lstm_tensor_rt_inference
@@ -75,8 +75,8 @@ add_holohub_application(iio DEPENDS OPERATORS iio_controller fft)
 add_subdirectory(laser_detection_latency)
 
 add_holohub_application(monai_endoscopic_tool_seg DEPENDS OPERATORS aja_source)
-add_holohub_application(multiai_endoscopy DEPENDS OPERATORS aja_source)
-add_holohub_application(multiai_ultrasound DEPENDS OPERATORS aja_source)
+add_holohub_application(multiai_endoscopy DEPENDS OPERATORS OPTIONAL aja_source)
+add_holohub_application(multiai_ultrasound DEPENDS OPERATORS OPTIONAL aja_source)
 
 add_subdirectory(nvidia_video_codec)
 
@@ -114,7 +114,7 @@ add_holohub_application(psd_pipeline DEPENDS
                                   vita49_psd_packetizer
                                   data_writer)
 
-add_holohub_application(ultrasound_segmentation DEPENDS OPERATORS aja_source)
+add_holohub_application(ultrasound_segmentation DEPENDS OPERATORS OPTIONAL aja_source)
 
 add_holohub_application(velodyne_lidar_app DEPENDS
                         OPERATORS velodyne_lidar
diff --git a/applications/aja_video_capture/cpp/CMakeLists.txt b/applications/aja_video_capture/cpp/CMakeLists.txt
index 42d1208d..bf25b409 100644
--- a/applications/aja_video_capture/cpp/CMakeLists.txt
+++ b/applications/aja_video_capture/cpp/CMakeLists.txt
@@ -24,7 +24,7 @@ target_link_libraries(aja_capture
   PRIVATE
   holoscan::core
   holoscan::ops::holoviz
-  holoscan::aja
+  $<TARGET_NAME_IF_EXISTS:holoscan::aja>
 )
 
 # Copy config file
@@ -76,7 +76,7 @@ if(BUILD_TESTING)
     holoscan::ops::video_stream_replayer
     holoscan::ops::video_stream_recorder
     holoscan::ops::format_converter
-    holoscan::aja
+    $<TARGET_NAME_IF_EXISTS:holoscan::aja>
   )
 
   # Add the test and make sure it runs
diff --git a/applications/endoscopy_out_of_body_detection/cpp/CMakeLists.txt b/applications/endoscopy_out_of_body_detection/cpp/CMakeLists.txt
index ac94d004..bb3dbe7f 100644
--- a/applications/endoscopy_out_of_body_detection/cpp/CMakeLists.txt
+++ b/applications/endoscopy_out_of_body_detection/cpp/CMakeLists.txt
@@ -24,7 +24,7 @@ target_link_libraries(endoscopy_out_of_body_detection
     holoscan::ops::format_converter
     holoscan::ops::inference
     holoscan::ops::inference_processor
-    holoscan::aja
+    $<TARGET_NAME_IF_EXISTS:holoscan::aja>
 )
 
 # Add downloaded data as a dependency
diff --git a/applications/endoscopy_out_of_body_detection/cpp/main.cpp b/applications/endoscopy_out_of_body_detection/cpp/main.cpp
index 7b5c1ea4..f06e21b7 100644
--- a/applications/endoscopy_out_of_body_detection/cpp/main.cpp
+++ b/applications/endoscopy_out_of_body_detection/cpp/main.cpp
@@ -1,5 +1,5 @@
 /*
- * SPDX-FileCopyrightText: Copyright (c) 2022-2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
+ * SPDX-FileCopyrightText: Copyright (c) 2022-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
  * SPDX-License-Identifier: Apache-2.0
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -42,7 +42,12 @@ class App : public holoscan::Application {
     std::shared_ptr<Operator> source;
     std::shared_ptr<Resource> pool_resource = make_resource<UnboundedAllocator>("pool");
     if (is_aja_source_) {
+#ifdef AJA_SOURCE
       source = make_operator<ops::AJASourceOp>("aja", from_config("aja"));
+#else
+      throw std::runtime_error(
+          "AJA is requested but not available. Please enable AJA at build time.");
+#endif
     } else {
       const std::string replayer_config = enable_analytics ? "analytics_replayer" : "replayer";
       source = make_operator<ops::VideoStreamReplayerOp>(
@@ -76,8 +81,13 @@ class App : public holoscan::Application {
 
     // Flow definition
     if (is_aja_source_) {
+#ifdef AJA_SOURCE
       const std::set<std::pair<std::string, std::string>> aja_ports = {{"video_buffer_output", ""}};
       add_flow(source, out_of_body_preprocessor, aja_ports);
+#else
+      throw std::runtime_error(
+          "AJA is requested but not available. Please enable AJA at build time.");
+#endif
     } else {
       add_flow(source, out_of_body_preprocessor);
     }
diff --git a/applications/multiai_endoscopy/cpp/post-proc-cpu/CMakeLists.txt b/applications/multiai_endoscopy/cpp/post-proc-cpu/CMakeLists.txt
index 55b69339..2b54bfa4 100644
--- a/applications/multiai_endoscopy/cpp/post-proc-cpu/CMakeLists.txt
+++ b/applications/multiai_endoscopy/cpp/post-proc-cpu/CMakeLists.txt
@@ -1,4 +1,4 @@
-# SPDX-FileCopyrightText: Copyright (c) 2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
+# SPDX-FileCopyrightText: Copyright (c) 2023-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
 # SPDX-License-Identifier: Apache-2.0
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
@@ -32,7 +32,7 @@ target_link_libraries(multiai_endoscopy
   holoscan::ops::inference
   holoscan::ops::segmentation_postprocessor
   holoscan::ops::holoviz
-  holoscan::aja
+  $<TARGET_NAME_IF_EXISTS:holoscan::aja>
 )
 
 # Download the associated dataset if needed
@@ -96,7 +96,7 @@ if(BUILD_TESTING)
     holoscan::ops::inference
     holoscan::ops::segmentation_postprocessor
     holoscan::ops::holoviz
-    holoscan::aja
+    $<TARGET_NAME_IF_EXISTS:holoscan::aja>
   )
 
   # Add the test and make sure it runs
diff --git a/applications/multiai_endoscopy/cpp/post-proc-cpu/multi_ai.cpp b/applications/multiai_endoscopy/cpp/post-proc-cpu/multi_ai.cpp
index 516cd024..45febdfb 100644
--- a/applications/multiai_endoscopy/cpp/post-proc-cpu/multi_ai.cpp
+++ b/applications/multiai_endoscopy/cpp/post-proc-cpu/multi_ai.cpp
@@ -1,5 +1,5 @@
 /*
- * SPDX-FileCopyrightText: Copyright (c) 2022-2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
+ * SPDX-FileCopyrightText: Copyright (c) 2022-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
  * SPDX-License-Identifier: Apache-2.0
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -299,7 +299,12 @@ class App : public holoscan::Application {
     /* Source */
     std::shared_ptr<Operator> source;
     if (is_aja_source_) {
+#ifdef AJA_SOURCE
       source = make_operator<ops::AJASourceOp>("aja", from_config("aja"));
+#else
+      throw std::runtime_error(
+          "AJA is requested but not available. Please enable AJA at build time.");
+#endif
     } else {
       source = make_operator<ops::VideoStreamReplayerOp>("replayer", from_config("replayer"),
                                                   Arg("directory", datapath + "/endoscopy"));
@@ -349,9 +354,14 @@ class App : public holoscan::Application {
 
     // Source
     if (is_aja_source_) {
+#ifdef AJA_SOURCE
       add_flow(source, holoviz, {{"video_buffer_output", "receivers"}});
       add_flow(source, detection_preprocessor, {{"video_buffer_output", ""}});
       add_flow(source, segmentation_preprocessor, {{"video_buffer_output", ""}});
+#else
+      throw std::runtime_error(
+          "AJA is requested but not available. Please enable AJA at build time.");
+#endif
     } else {
       add_flow(source, holoviz, {{"", "receivers"}});
       add_flow(source, detection_preprocessor);
diff --git a/applications/multiai_endoscopy/cpp/post-proc-matx-cpu/CMakeLists.txt b/applications/multiai_endoscopy/cpp/post-proc-matx-cpu/CMakeLists.txt
index debe8016..94d069a7 100644
--- a/applications/multiai_endoscopy/cpp/post-proc-matx-cpu/CMakeLists.txt
+++ b/applications/multiai_endoscopy/cpp/post-proc-matx-cpu/CMakeLists.txt
@@ -1,4 +1,4 @@
-# SPDX-FileCopyrightText: Copyright (c) 2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
+# SPDX-FileCopyrightText: Copyright (c) 2023-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
 # SPDX-License-Identifier: Apache-2.0
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
@@ -49,7 +49,7 @@ target_link_libraries(multi_ai
   holoscan::ops::inference
   holoscan::ops::segmentation_postprocessor
   holoscan::ops::holoviz
-  holoscan::aja
+  $<TARGET_NAME_IF_EXISTS:holoscan::aja>
   matx::matx
 )
 
diff --git a/applications/multiai_endoscopy/cpp/post-proc-matx-cpu/multi_ai.cpp b/applications/multiai_endoscopy/cpp/post-proc-matx-cpu/multi_ai.cpp
index 4bceb685..7a98bfaf 100644
--- a/applications/multiai_endoscopy/cpp/post-proc-matx-cpu/multi_ai.cpp
+++ b/applications/multiai_endoscopy/cpp/post-proc-matx-cpu/multi_ai.cpp
@@ -1,5 +1,5 @@
 /*
- * SPDX-FileCopyrightText: Copyright (c) 2022-2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
+ * SPDX-FileCopyrightText: Copyright (c) 2022-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
  * SPDX-License-Identifier: Apache-2.0
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -263,7 +263,12 @@ class App : public holoscan::Application {
     /* Source */
     std::shared_ptr<Operator> source;
     if (is_aja_source_) {
+#ifdef AJA_SOURCE
       source = make_operator<ops::AJASourceOp>("aja", from_config("aja"));
+#else
+      throw std::runtime_error(
+          "AJA is requested but not available. Please enable AJA at build time.");
+#endif
     } else {
       source = make_operator<ops::VideoStreamReplayerOp>("replayer", from_config("replayer"),
                                                   Arg("directory", datapath + "/endoscopy"));
diff --git a/applications/multiai_ultrasound/cpp/CMakeLists.txt b/applications/multiai_ultrasound/cpp/CMakeLists.txt
index 01e67ea3..09877bc8 100644
--- a/applications/multiai_ultrasound/cpp/CMakeLists.txt
+++ b/applications/multiai_ultrasound/cpp/CMakeLists.txt
@@ -1,4 +1,4 @@
-# SPDX-FileCopyrightText: Copyright (c) 2022-2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
+# SPDX-FileCopyrightText: Copyright (c) 2022-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
 # SPDX-License-Identifier: Apache-2.0
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
@@ -32,7 +32,7 @@ target_link_libraries(multiai_ultrasound
     holoscan::ops::holoviz
     holoscan::ops::inference
     holoscan::ops::inference_processor
-    holoscan::aja
+    $<TARGET_NAME_IF_EXISTS:holoscan::aja>
     visualizer_icardio
 )
 
diff --git a/applications/multiai_ultrasound/cpp/main.cpp b/applications/multiai_ultrasound/cpp/main.cpp
index 3b02ea62..d0cd2afe 100644
--- a/applications/multiai_ultrasound/cpp/main.cpp
+++ b/applications/multiai_ultrasound/cpp/main.cpp
@@ -1,5 +1,5 @@
 /*
- * SPDX-FileCopyrightText: Copyright (c) 2022-2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
+ * SPDX-FileCopyrightText: Copyright (c) 2022-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
  * SPDX-License-Identifier: Apache-2.0
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -65,7 +65,12 @@ class App : public holoscan::Application {
         make_resource<CudaStreamPool>("cuda_stream");
 
     if (is_aja_source_) {
+#ifdef AJA_SOURCE
       source = make_operator<ops::AJASourceOp>("aja", from_config("aja"));
+#else
+      throw std::runtime_error(
+          "AJA is requested but not available. Please enable AJA at build time.");
+#endif
     } else {
       source = make_operator<ops::VideoStreamReplayerOp>(
           "replayer", from_config("replayer"), Arg("directory", datapath));
diff --git a/applications/multiai_ultrasound/python/multiai_ultrasound.py b/applications/multiai_ultrasound/python/multiai_ultrasound.py
index 4e96044c..dbcc6e86 100644
--- a/applications/multiai_ultrasound/python/multiai_ultrasound.py
+++ b/applications/multiai_ultrasound/python/multiai_ultrasound.py
@@ -1,4 +1,4 @@
-# SPDX-FileCopyrightText: Copyright (c) 2022-2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
+# SPDX-FileCopyrightText: Copyright (c) 2022-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
 # SPDX-License-Identifier: Apache-2.0
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
@@ -29,7 +29,6 @@ from holoscan.operators import (
 from holoscan.resources import BlockMemoryPool, CudaStreamPool, MemoryStorageType
 from packaging.version import Version
 
-from holohub.aja_source import AJASourceOp
 from holohub.visualizer_icardio import VisualizerICardioOp
 
 
@@ -61,6 +60,8 @@ class MultiAIICardio(Application):
 
         record_type = self.record_type
         is_aja = self.source.lower() == "aja"
+        if is_aja:
+            from holohub.aja_source import AJASourceOp
 
         SourceClass = AJASourceOp if is_aja else VideoStreamReplayerOp
         source_kwargs = self.kwargs(self.source)
diff --git a/applications/object_detection_torch/CMakeLists.txt b/applications/object_detection_torch/CMakeLists.txt
index f7689cfe..2b02afeb 100644
--- a/applications/object_detection_torch/CMakeLists.txt
+++ b/applications/object_detection_torch/CMakeLists.txt
@@ -66,8 +66,9 @@ target_link_libraries(object_detection_torch
     holoscan::ops::inference
     holoscan::ops::inference_processor
     holoscan::ops::holoviz
-    $<$<TARGET_EXISTS:holoscan::aja>:holoscan::aja>
+    $<TARGET_NAME_IF_EXISTS:holoscan::aja>
 )
+
 if(holoscan_VERSION GREATER 3.5)
   # Forcibly link torchvision and its required Python symbols to prevent ResNet runtime import failure
   target_link_libraries(object_detection_torch
diff --git a/applications/ultrasound_segmentation/cpp/CMakeLists.txt b/applications/ultrasound_segmentation/cpp/CMakeLists.txt
index 83d41ca4..78ce3d7a 100644
--- a/applications/ultrasound_segmentation/cpp/CMakeLists.txt
+++ b/applications/ultrasound_segmentation/cpp/CMakeLists.txt
@@ -1,4 +1,4 @@
-# SPDX-FileCopyrightText: Copyright (c) 2022-2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
+# SPDX-FileCopyrightText: Copyright (c) 2022-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
 # SPDX-License-Identifier: Apache-2.0
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
@@ -31,7 +31,7 @@ target_link_libraries(ultrasound_segmentation
    holoscan::ops::inference
    holoscan::ops::segmentation_postprocessor
    holoscan::ops::holoviz
-   holoscan::aja
+   $<TARGET_NAME_IF_EXISTS:holoscan::aja>
 )
 
 # Download the associated dataset if needed
@@ -93,7 +93,7 @@ if(BUILD_TESTING)
     holoscan::ops::inference
     holoscan::ops::segmentation_postprocessor
     holoscan::ops::holoviz
-    holoscan::aja
+    $<TARGET_NAME_IF_EXISTS:holoscan::aja>
   )
 
   # Add the test and make sure it runs
diff --git a/applications/ultrasound_segmentation/cpp/main.cpp b/applications/ultrasound_segmentation/cpp/main.cpp
index 3d67041b..507ab075 100644
--- a/applications/ultrasound_segmentation/cpp/main.cpp
+++ b/applications/ultrasound_segmentation/cpp/main.cpp
@@ -1,5 +1,5 @@
 /*
- * SPDX-FileCopyrightText: Copyright (c) 2022-2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
+ * SPDX-FileCopyrightText: Copyright (c) 2022-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
  * SPDX-License-Identifier: Apache-2.0
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -44,7 +44,12 @@ class App : public holoscan::Application {
     std::shared_ptr<Operator> drop_alpha_channel;
 
     if (is_aja_source_) {
+#ifdef AJA_SOURCE
       source = make_operator<ops::AJASourceOp>("aja", from_config("aja"));
+#else
+      throw std::runtime_error(
+          "AJA is requested but not available. Please enable AJA at build time.");
+#endif
     } else {
       source = make_operator<ops::VideoStreamReplayerOp>("replayer", from_config("replayer"),
                                                                      Arg("directory", datapath));
@@ -58,6 +63,7 @@ class App : public holoscan::Application {
     const int n_channels = 4;
     const int bpp = 4;
     if (is_aja_source_) {
+#ifdef AJA_SOURCE
       uint64_t drop_alpha_block_size = width * height * n_channels * bpp;
       uint64_t drop_alpha_num_blocks = 2;
       drop_alpha_channel = make_operator<ops::FormatConverterOp>(
@@ -66,6 +72,10 @@ class App : public holoscan::Application {
           Arg("pool") = make_resource<BlockMemoryPool>(
               "pool", 1, drop_alpha_block_size, drop_alpha_num_blocks),
           Arg("cuda_stream_pool") = cuda_stream_pool);
+#else
+      throw std::runtime_error(
+          "AJA is requested but not available. Please enable AJA at build time.");
+#endif
     }
 
     int width_preprocessor = 1264;
@@ -114,9 +124,14 @@ class App : public holoscan::Application {
     // Flow definition
 
     if (is_aja_source_) {
+#ifdef AJA_SOURCE
       add_flow(source, segmentation_visualizer, {{"video_buffer_output", "receivers"}});
       add_flow(source, drop_alpha_channel, {{"video_buffer_output", ""}});
       add_flow(drop_alpha_channel, segmentation_preprocessor);
+#else
+      throw std::runtime_error(
+          "AJA is requested but not available. Please enable AJA at build time.");
+#endif
     } else {
       add_flow(source, segmentation_visualizer, {{"", "receivers"}});
       add_flow(source, segmentation_preprocessor);
diff --git a/applications/ultrasound_segmentation/python/ultrasound_segmentation.py b/applications/ultrasound_segmentation/python/ultrasound_segmentation.py
index db35938f..fe88bd70 100644
--- a/applications/ultrasound_segmentation/python/ultrasound_segmentation.py
+++ b/applications/ultrasound_segmentation/python/ultrasound_segmentation.py
@@ -1,4 +1,4 @@
-# SPDX-FileCopyrightText: Copyright (c) 2022-2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
+# SPDX-FileCopyrightText: Copyright (c) 2022-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
 # SPDX-License-Identifier: Apache-2.0
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
@@ -26,8 +26,6 @@ from holoscan.operators import (
 )
 from holoscan.resources import BlockMemoryPool, CudaStreamPool, MemoryStorageType
 
-from holohub.aja_source import AJASourceOp
-
 
 class UltrasoundApp(Application):
     def __init__(self, data, source="replayer"):
@@ -74,6 +72,8 @@ class UltrasoundApp(Application):
 
         is_aja = self.source.lower() == "aja"
         if is_aja:
+            from holohub.aja_source import AJASourceOp
+
             source = AJASourceOp(self, name="aja", **self.kwargs("aja"))
             drop_alpha_block_size = 1920 * 1080 * n_channels * bpp
             drop_alpha_num_blocks = 2
-- 
2.34.1

